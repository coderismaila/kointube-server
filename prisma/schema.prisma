// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  username String @unique
  country  String
  password String

  channel_name String?
  profile_img  String  @default("/https://res.cloudinary.com/dizyob2oz/image/upload/q_10/v1635425995/profile_img.jpg")
  cover_img    String  @default("https://res.cloudinary.com/dizyob2oz/image/upload/q_10/v1635426295/cover_image.jpg")

  role   Role    @default(User)
  videos Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Like    Like[]
  Dislike Dislike[]
  History History[]
  user    View[]    @relation("user")
  channel View[]    @relation("channel")

  subscriber Subscribe[] @relation("subscriber")
  author     Subscribe[] @relation("author")
  Comment    Comment[]
  Reply      Reply[]
  @@index([id, email, username])
}

model Video {
  id           String @id @default(cuid())
  title        String
  videoUrl     String // the video url of video uploaded to cloudinary
  thumbnailUrl String // the image url for image uploaded to cloudinary
  authorid     String
  author       User   @relation(fields: [authorid], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Like      Like[]
  dislike   Dislike[]
  View      View[]
  Comment   Comment[]
  History History[]
}

model Like {
  id      String @id @default(cuid())
  userid  String
  videoid String
  video   Video  @relation(fields: [videoid], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userid], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Dislike {
  id      String @id @default(cuid())
  userid  String
  videoid String
  video   Video  @relation(fields: [videoid], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userid], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model View {
  id        String @id @default(cuid())
  userid    String
  videoid   String
  channelid String
  video     Video  @relation(fields: [videoid], references: [id], onDelete: Cascade)
  user      User   @relation("user", fields: [userid], references: [id], onDelete: Cascade)
  channel   User   @relation("channel", fields: [channelid], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Comment {
  id String @id @default(cuid())

  content String
  userid  String
  videoid String

  user  User  @relation(fields: [userid], references: [id])
  video Video @relation(fields: [videoid], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Reply     Reply[]
}

model Reply {
  id String @id @default(cuid())

  content   String
  userid    String
  commentid String

  user    User    @relation(fields: [userid], references: [id])
  comment Comment @relation(fields: [commentid], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id        String   @id @default(cuid())
  userid    String
  videoid   String

  user    User    @relation(fields: [userid], references: [id])
  video Video @relation(fields: [videoid], references: [id])
  
  createdAt DateTime @default(now())
}

model Subscribe {
  id           String @id @default(cuid())
  authorid     String
  subscriberid String

  subscriber User @relation("subscriber", fields: [subscriberid], references: [id])
  author     User @relation("author", fields: [authorid], references: [id])


  createdAt DateTime @default(now())
}

enum Role {
  User
  Mod
  Admin
}
